name: Pipeline CI-CD do Backend

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [7.4]

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 6603:3306
        env:
          MYSQL_ROOT_PASSWORD: root
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.version }}
          extensions: pdo
          coverage: xdebug2

      - name: Install dependencies
        run: composer update

      - name: Create database and tables
        run: ENV=ci php ./setup_database_ci.php

      - name: Run test coverage and check
        run: make test-cov-ci

  #     - name: Check dependencies for vulnerabilities
  #       working-directory: ${{ env.WORKDIR }}
  #       run: npm audit --audit-level=high

  #     - name: Run Cypress tests
  #       uses: cypress-io/github-action@v2
  #       with:
  #         runTests: true

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v1

  #     - name: Run SonarQube Scan
  #       run: sonar-scanner

  # build:
  #   needs: [ci]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ${{ env.WORKDIR }}/
  #         file: ${{ env.WORKDIR }}/Dockerfile
  #         push: true
  #         tags: deirofelippe/agenda-telefonica-backend:latest

  #     - name: Deploy to Kubernetes
  #       uses: azure/k8s-deploy@v2
  #       with:
  #         namespace: production
  #         manifests: ./k8s-manifest.yaml

  # notify-success:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   if: ${{ success() }}

  #   steps:
  #     - name: Notify Telegram If Success
  #       run: |
  #         TELEGRAM_MESSAGE='[Agenda Telefônica] Pipeline foi finalizada'

  #         CURL_DATA=$(printf '{"chat_id":"%s","text":"%s"}' "${{ secrets.TELEGRAM_CHAT_ID }}" "$TELEGRAM_MESSAGE")

  #         curl https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
  #           --request POST \
  #           --header 'Content-Type: application/json' \
  #           --data "$CURL_DATA"

  # notify-failure:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   if: ${{ failure() }}

  #   steps:
  #     - name: Notify Telegram If Failure
  #       run: |
  #         TELEGRAM_MESSAGE='[Agenda Telefônica] Falha na pipeline'

  #         CURL_DATA=$(printf '{"chat_id":"%s","text":"%s"}' "${{ secrets.TELEGRAM_CHAT_ID }}" "$TELEGRAM_MESSAGE")

  #         curl https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
  #           --request POST \
  #           --header 'Content-Type: application/json' \
  #           --data "$CURL_DATA"
